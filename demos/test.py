# Demo: visualize meshes generated by sensray.mesh.generator
# - generates a tetrahedral sphere mesh
# - computes a simple per-cell property (vp) and attaches it
# - shows an interactive PyVista window
# - exports a .vtu file that can be opened in ParaView

from sensray.mesh.generator import spherical_tetra_mesh
import pyvista as pv
import numpy as np


def main():
    # Generate a coarse tetrahedral sphere mesh and visualize it.
    mesh = spherical_tetra_mesh(r_planet=6371.0, mesh_size=1200.0)
    # Create a smooth point-based scalar so the slice colors interpolate nicely.
    pts = mesh.points
    radii = np.linalg.norm(pts, axis=1)
    vp_points = 6.0 + 2.0 * ((radii.max() - radii) / radii.max())
    mesh.point_data['vp'] = vp_points

    # Take a planar slice through the mesh (XY plane at z=0) and clean duplicates
    slice_mesh = mesh.slice(normal='z', origin=(0, 0, 0)).clean()

    # Optionally decimate the slice for faster rendering (uncomment if needed)
    # slice_mesh = slice_mesh.decimate_pro(0.25)

    # Visualize the cleaned slice with smooth shading (avoids 'static' triangulation look)
    p = pv.Plotter()
    p.add_mesh(slice_mesh, scalars='vp', cmap='viridis', smooth_shading=True)
    # Add a faint wireframe overlay to show topology without overwhelming the view
    p.add_mesh(slice_mesh, color='k', style='wireframe', opacity=0.15)
    p.add_axes()
    p.show()


if __name__ == '__main__':
    main()